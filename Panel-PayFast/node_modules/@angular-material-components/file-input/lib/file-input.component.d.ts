import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, DoCheck, ElementRef, OnDestroy } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { CanUpdateErrorState, ErrorStateMatcher, ThemePalette } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { _MatInputMixinBase } from '@angular/material/input';
import { Subject } from 'rxjs';
import { FileOrArrayFile } from './file-input-type';
import * as ɵngcc0 from '@angular/core';
export declare class NgxMatFileInputIcon {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMatFileInputIcon, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxMatFileInputIcon, "[ngxMatFileInputIcon]", never, {}, {}, never>;
}
export declare class NgxMatFileInputComponent extends _MatInputMixinBase implements MatFormFieldControl<FileOrArrayFile>, OnDestroy, DoCheck, CanUpdateErrorState, ControlValueAccessor {
    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;
    protected _platform: Platform;
    private _cd;
    ngControl: NgControl;
    private _inputFileRef;
    private _inputValueRef;
    /** Custom icon set by the consumer. */
    _customIcon: NgxMatFileInputIcon;
    color: ThemePalette;
    fileNames: string;
    protected _uid: string;
    protected _previousNativeValue: any;
    _ariaDescribedby: string;
    readonly stateChanges: Subject<void>;
    focused: boolean;
    errorState: boolean;
    controlType: string;
    autofilled: boolean;
    /** Function when touched */
    _onTouched: () => void;
    /** Function when changed */
    _onChange: (value: FileOrArrayFile) => void;
    disabled: boolean;
    protected _disabled: boolean;
    id: string;
    protected _id: string;
    multiple: boolean;
    protected _multiple: boolean;
    placeholder: string;
    separator: string;
    required: boolean;
    protected _required: boolean;
    errorStateMatcher: ErrorStateMatcher;
    value: FileOrArrayFile;
    protected _value: FileOrArrayFile;
    readonly: boolean;
    private _readonly;
    /**
     * Limiting accepted file types
     * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" — Accept PNG or JPEG files.
     */
    accept: string;
    private _accept;
    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, _cd: ChangeDetectorRef, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher);
    ngOnChanges(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    writeValue(value: FileOrArrayFile): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /** Focuses the input. */
    focus(options?: FocusOptions): void;
    _focusChanged(isFocused: boolean): void;
    /** Mark the field as touched */
    _markAsTouched(): void;
    protected _isBadInput(): boolean;
    readonly empty: boolean;
    readonly shouldLabelFloat: boolean;
    setDescribedByIds(ids: string[]): void;
    openFilePicker(event?: MouseEvent): void;
    handleFiles(filelist: FileList): void;
    /** Handles a click on the control's container. */
    onContainerClick(event: MouseEvent): void;
    private _resetInputFile;
    private _updateInputValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMatFileInputComponent, [null, null, null, { optional: true; self: true; }, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxMatFileInputComponent, "ngx-mat-file-input", ["ngx-mat-file-input"], { "color": "color"; "placeholder": "placeholder"; "separator": "separator"; "id": "id"; "disabled": "disabled"; "multiple": "multiple"; "required": "required"; "value": "value"; "readonly": "readonly"; "accept": "accept"; "errorStateMatcher": "errorStateMatcher"; }, {}, ["_customIcon"], ["[ngxMatFileInputIcon]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1pbnB1dC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZmlsZS1pbnB1dC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgRm9ybUdyb3VwRGlyZWN0aXZlLCBOZ0NvbnRyb2wsIE5nRm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQ2FuVXBkYXRlRXJyb3JTdGF0ZSwgRXJyb3JTdGF0ZU1hdGNoZXIsIFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xyXG5pbXBvcnQgeyBNYXRGb3JtRmllbGRDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvZm9ybS1maWVsZCc7XHJcbmltcG9ydCB7IF9NYXRJbnB1dE1peGluQmFzZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2lucHV0JztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBGaWxlT3JBcnJheUZpbGUgfSBmcm9tICcuL2ZpbGUtaW5wdXQtdHlwZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neE1hdEZpbGVJbnB1dEljb24ge1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neE1hdEZpbGVJbnB1dENvbXBvbmVudCBleHRlbmRzIF9NYXRJbnB1dE1peGluQmFzZSBpbXBsZW1lbnRzIE1hdEZvcm1GaWVsZENvbnRyb2w8RmlsZU9yQXJyYXlGaWxlPiwgT25EZXN0cm95LCBEb0NoZWNrLCBDYW5VcGRhdGVFcnJvclN0YXRlLCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XHJcbiAgICBwcm90ZWN0ZWQgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudCB8IEhUTUxTZWxlY3RFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudD47XHJcbiAgICBwcm90ZWN0ZWQgX3BsYXRmb3JtOiBQbGF0Zm9ybTtcclxuICAgIHByaXZhdGUgX2NkO1xyXG4gICAgbmdDb250cm9sOiBOZ0NvbnRyb2w7XHJcbiAgICBwcml2YXRlIF9pbnB1dEZpbGVSZWY7XHJcbiAgICBwcml2YXRlIF9pbnB1dFZhbHVlUmVmO1xyXG4gICAgLyoqIEN1c3RvbSBpY29uIHNldCBieSB0aGUgY29uc3VtZXIuICovXHJcbiAgICBfY3VzdG9tSWNvbjogTmd4TWF0RmlsZUlucHV0SWNvbjtcclxuICAgIGNvbG9yOiBUaGVtZVBhbGV0dGU7XHJcbiAgICBmaWxlTmFtZXM6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBfdWlkOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX3ByZXZpb3VzTmF0aXZlVmFsdWU6IGFueTtcclxuICAgIF9hcmlhRGVzY3JpYmVkYnk6IHN0cmluZztcclxuICAgIHJlYWRvbmx5IHN0YXRlQ2hhbmdlczogU3ViamVjdDx2b2lkPjtcclxuICAgIGZvY3VzZWQ6IGJvb2xlYW47XHJcbiAgICBlcnJvclN0YXRlOiBib29sZWFuO1xyXG4gICAgY29udHJvbFR5cGU6IHN0cmluZztcclxuICAgIGF1dG9maWxsZWQ6IGJvb2xlYW47XHJcbiAgICAvKiogRnVuY3Rpb24gd2hlbiB0b3VjaGVkICovXHJcbiAgICBfb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqIEZ1bmN0aW9uIHdoZW4gY2hhbmdlZCAqL1xyXG4gICAgX29uQ2hhbmdlOiAodmFsdWU6IEZpbGVPckFycmF5RmlsZSkgPT4gdm9pZDtcclxuICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgcHJvdGVjdGVkIF9kaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgX2lkOiBzdHJpbmc7XHJcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcclxuICAgIHByb3RlY3RlZCBfbXVsdGlwbGU6IGJvb2xlYW47XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgc2VwYXJhdG9yOiBzdHJpbmc7XHJcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcclxuICAgIHByb3RlY3RlZCBfcmVxdWlyZWQ6IGJvb2xlYW47XHJcbiAgICBlcnJvclN0YXRlTWF0Y2hlcjogRXJyb3JTdGF0ZU1hdGNoZXI7XHJcbiAgICB2YWx1ZTogRmlsZU9yQXJyYXlGaWxlO1xyXG4gICAgcHJvdGVjdGVkIF92YWx1ZTogRmlsZU9yQXJyYXlGaWxlO1xyXG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9yZWFkb25seTtcclxuICAgIC8qKlxyXG4gICAgICogTGltaXRpbmcgYWNjZXB0ZWQgZmlsZSB0eXBlc1xyXG4gICAgICogRXhhbXBsZTogYWNjZXB0PVwiaW1hZ2UvcG5nLCBpbWFnZS9qcGVnXCIgb3IgYWNjZXB0PVwiLnBuZywgLmpwZywgLmpwZWdcIiDigJQgQWNjZXB0IFBORyBvciBKUEVHIGZpbGVzLlxyXG4gICAgICovXHJcbiAgICBhY2NlcHQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgX2FjY2VwdDtcclxuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQ+LCBfcGxhdGZvcm06IFBsYXRmb3JtLCBfY2Q6IENoYW5nZURldGVjdG9yUmVmLCBuZ0NvbnRyb2w6IE5nQ29udHJvbCwgX3BhcmVudEZvcm06IE5nRm9ybSwgX3BhcmVudEZvcm1Hcm91cDogRm9ybUdyb3VwRGlyZWN0aXZlLCBfZGVmYXVsdEVycm9yU3RhdGVNYXRjaGVyOiBFcnJvclN0YXRlTWF0Y2hlcik7XHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogRmlsZU9yQXJyYXlGaWxlKTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcclxuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICAvKiogRm9jdXNlcyB0aGUgaW5wdXQuICovXHJcbiAgICBmb2N1cyhvcHRpb25zPzogRm9jdXNPcHRpb25zKTogdm9pZDtcclxuICAgIF9mb2N1c0NoYW5nZWQoaXNGb2N1c2VkOiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKiBNYXJrIHRoZSBmaWVsZCBhcyB0b3VjaGVkICovXHJcbiAgICBfbWFya0FzVG91Y2hlZCgpOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIF9pc0JhZElucHV0KCk6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBlbXB0eTogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IHNob3VsZExhYmVsRmxvYXQ6IGJvb2xlYW47XHJcbiAgICBzZXREZXNjcmliZWRCeUlkcyhpZHM6IHN0cmluZ1tdKTogdm9pZDtcclxuICAgIG9wZW5GaWxlUGlja2VyKGV2ZW50PzogTW91c2VFdmVudCk6IHZvaWQ7XHJcbiAgICBoYW5kbGVGaWxlcyhmaWxlbGlzdDogRmlsZUxpc3QpOiB2b2lkO1xyXG4gICAgLyoqIEhhbmRsZXMgYSBjbGljayBvbiB0aGUgY29udHJvbCdzIGNvbnRhaW5lci4gKi9cclxuICAgIG9uQ29udGFpbmVyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfcmVzZXRJbnB1dEZpbGU7XHJcbiAgICBwcml2YXRlIF91cGRhdGVJbnB1dFZhbHVlO1xyXG59XHJcbiJdfQ==